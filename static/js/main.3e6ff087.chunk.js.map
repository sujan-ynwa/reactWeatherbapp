{"version":3,"sources":["weather.module.css","showWeather.js","searchForm.js","hookCounter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Weather","temp","pressure","feels_like","humidity","cityName","icon","className","style","container","src","alt","SearchForm","initialMount","useRef","useState","search","setSearch","start","setStart","error","setError","weatherStats","setWeatherStats","setCityName","setIcon","showWeather","setShowWeather","useEffect","current","a","async","REQUEST","fetch","response","console","log","statusText","json","data","forIcon","weather","IconUrl","main","name","fetchData","onSubmit","event","preventDefault","type","onChange","target","value","HookCounter","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wGACAA,EAAOC,QAAU,CAAC,UAAY,6B,wMCoBfC,EAlBC,SAAC,GAA8D,IAA5DC,EAA2D,EAA3DA,KAAMC,EAAqD,EAArDA,SAAUC,EAA2C,EAA3CA,WAAYC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KAC/D,OACI,yBAAKC,UAAWC,IAAMC,WAClB,6BACI,yBAAKC,IAAKJ,EAAMK,IAAI,WAGvB,6BACG,4BAAKN,EAAL,KACA,2CAAiBJ,EAAjB,WACA,2CAAiBE,GACjB,yCAAeD,GACf,yCAAeE,MCyFhBQ,EAnGI,WAGf,IAAMC,EAAeC,kBAAO,GAHP,EAKOC,mBAAS,IALhB,mBAKdC,EALc,KAKNC,EALM,OAQKF,oBAAS,GARd,mBAQdG,EARc,KAQPC,EARO,OAUKJ,mBAAS,IAVd,mBAUdK,EAVc,KAUPC,EAVO,OAamBN,mBAAS,IAb5B,mBAadO,EAbc,KAaAC,EAbA,OAcWR,mBAAS,IAdpB,mBAcdV,EAdc,KAcJmB,EAdI,OAeGT,mBAAS,IAfZ,mBAedT,EAfc,KAeRmB,EAfQ,OAiBiBV,oBAAS,GAjB1B,mBAiBdW,EAjBc,KAiBDC,EAjBC,KA4ErB,OAzDAC,qBAAU,WAEFf,EAAagB,QACbhB,EAAagB,SAAU,EAEnBX,GAOZ,2BAAAY,EAAAC,OAAA,oDACQb,EADR,uBAEwB,mCACVc,EAHd,4DAG6EhB,EAH7E,+BAEwB,oCAFxB,WAAAc,EAAA,MAK+BG,MAAMD,IALrC,UAKcE,EALd,OAMQC,QAAQC,IAAIF,EAASG,YACO,cAAxBH,EAASG,YAAsD,gBAAxBH,EAASG,WAP5D,iBAQYhB,EAAS,kCACTM,GAAe,GAT3B,2CAAAG,EAAA,MAY+BI,EAASI,QAZxC,QAYkBC,EAZlB,OAakBC,EAAUD,EAAKE,QAEfC,EAflB,0CAe+DF,EAAQ,GAAGlC,KAf1E,QAgBYmB,EAAQiB,GAERP,QAAQC,IAAII,EAAQ,GAAGlC,MACvBiB,EAAgBgB,EAAKI,MACrBnB,EAAYe,EAAKK,MACjBjB,GAAe,GACfV,EAAU,IAtBtB,QAyBME,GAAS,GAzBf,wBA2BQgB,QAAQC,IAAI,uBA3BpB,sCANYS,KAGV,CAAC3B,IAiDC,6BACI,6BACI,0BAAMX,UAAU,cAAcuC,SAR1C,SAAoBC,GAChBA,EAAMC,iBACN7B,GAAS,KAOG,2BAAOZ,UAAU,aAAa0C,KAAK,OAAOC,SAd1D,SAAsBH,GAClBA,EAAMC,iBACN/B,EAAU8B,EAAMI,OAAOC,QAYuDA,MAAOpC,IACzE,4BAAQiC,KAAK,SAAS1C,UAAU,iBAAhC,YAGR,6BACKmB,EACI,kBAAC,EAAD,CAASzB,KAAMqB,EAAarB,KAAME,WAAYmB,EAAanB,WACxDD,SAAUoB,EAAapB,SACvBE,SAAUkB,EAAalB,SACvBC,SAAUA,EACVC,KAAMA,IAET,4BAAKc,MCvEXiC,ICHIC,EAhBP,WAGR,OACI,6BACI,yBAAK/C,UAAU,UACX,sDAGJ,6BACI,kBAAC,EAAD,SCLIgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3e6ff087.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"weather_container__1h3Yr\"};","import React from 'react';\r\nimport style from './weather.module.css'\r\n\r\nconst Weather = ({ temp, pressure, feels_like, humidity, cityName, icon }) => {\r\n    return (\r\n        <div className={style.container}>\r\n            <div>\r\n                <img src={icon} alt=\"Icons\" />\r\n            </div>\r\n\r\n             <div>\r\n                <h1>{cityName} </h1>\r\n                <h2>Temperatue: {temp}  &#176;c</h2>\r\n                <h2>Feels like: {feels_like}</h2>\r\n                <h2>Pressure: {pressure}</h2>\r\n                <h2>Humidity: {humidity}</h2>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\nexport default Weather ;","import React, { useState,useEffect, useRef} from 'react';\r\nimport './App.css';\r\nimport Weather from './showWeather';\r\nimport style from './weather.module.css';\r\n\r\nconst SearchForm = () => {\r\n\r\n    // to stop the useEffect from rendering when the app is mounted for the first time\r\n    const initialMount = useRef(true);\r\n\r\n    const [search, setSearch] = useState('');\r\n\r\n\r\n    const [start, setStart] = useState(false);\r\n\r\n    const [error, setError] = useState('');\r\n\r\n    \r\n    const [weatherStats, setWeatherStats] = useState([]);\r\n    const [cityName, setCityName] = useState('');\r\n    const [icon, setIcon] = useState('');\r\n\r\n    const [showWeather, setShowWeather] = useState(false);\r\n    \r\n    useEffect(() => {\r\n        // to stop useEffect from rendering at the mounting of the app\r\n        if (initialMount.current) {\r\n            initialMount.current = false;\r\n        } else {\r\n            if (start) {  \r\n                fetchData();\r\n            }\r\n        }   \r\n    },[start]);  \r\n\r\n\r\n    async function fetchData() {\r\n        if (start) {\r\n            const APP_KEY = \"c90701167db814596c5964d731e6d1fd\";\n            const REQUEST = `https://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=${APP_KEY}`;\r\n\r\n            const response = await fetch(REQUEST);\n            console.log(response.statusText);\n            if (response.statusText === \"Not Found\" || response.statusText === \"Bad Request\") {\r\n                setError('Sorry we cannot find your city');\r\n                setShowWeather(false);  \r\n\r\n            } else {\r\n                const data = await response.json();\r\n                const forIcon = data.weather;\r\n\r\n                const IconUrl = `http://openweathermap.org/img/w/${forIcon[0].icon}.png`;\r\n                setIcon(IconUrl);\r\n\r\n                console.log(forIcon[0].icon);\r\n                setWeatherStats(data.main);\r\n                setCityName(data.name);\r\n                setShowWeather(true);\r\n                setSearch('');\r\n            }\r\n            \r\n          setStart(false);\r\n        } else {\r\n            console.log(\"the false condition\");\r\n\r\n        }\r\n\r\n        \r\n    }\r\n\r\n\r\n    function updateSearch(event){\r\n        event.preventDefault();\r\n        setSearch(event.target.value);\r\n    }\r\n\r\n    function submitForm(event) {\r\n        event.preventDefault();\r\n        setStart(true)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <form className=\"search-form\" onSubmit={submitForm} >\r\n                    <input className=\"search-bar\" type=\"text\" onChange={updateSearch} value={search} />\r\n                    <button type=\"submit\" className=\"search-button\">Serach</button>\r\n                </form>\r\n            </div>\r\n            <div>\r\n                {showWeather ?\r\n                    (<Weather temp={weatherStats.temp} feels_like={weatherStats.feels_like}\r\n                        pressure={weatherStats.pressure}\r\n                        humidity={weatherStats.humidity}\r\n                        cityName={cityName}\r\n                        icon={icon}></Weather>)\r\n                    : \r\n                    (<h1>{error}</h1>)  \r\n               }\r\n            </div>\r\n        </div>\r\n        );\r\n}\r\n\r\nexport default SearchForm;","import React, { useState, useEffect, useRef} from 'react';\r\n\r\nfunction HookCounter () {\r\n\r\n    const [counter, setCounter] = useState(0)\r\n    const [name, setName] = useState('')\r\n\r\n    const initialMount = useRef(true);\r\n\r\n    useEffect(() => {\r\n\r\n        if (initialMount.current) {\r\n\r\n            initialMount.current = false;\r\n        } else {\r\n            console.log(\"asdasdasdasd----\")\r\n            console.log(counter)\r\n        }\r\n       \r\n    },[name])\r\n\r\n    return (\r\n        < button onClick={() => setCounter(counter + 1)}> Click {counter} </button>\r\n    )\r\n}\r\n\r\nexport default HookCounter","import React, { useEffect, useState} from 'react';\nimport './App.css';\nimport SearchFrom from './searchForm';\nimport HookCounter from './hookCounter';\n\n\n\nconst App = () => {\r\n\n    // this is basically for html stuffs\n    return ( \n        <div>\n            <div className=\"header\">\n                <h1>Find your weather !!!</h1>\n            {/* <HookCounter />*/}\n             </div>\n            <div>\n                <SearchFrom />\n            </div>   \n         </div>\n      );\n    }\n    \n    export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}